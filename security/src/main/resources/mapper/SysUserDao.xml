<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.cyc.security.dao.SysUserDao">

    <resultMap type="com.cyc.security.entity.SysUser" id="SysUserMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="account" column="account" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="enabled" column="enabled" jdbcType="OTHER"/>
        <result property="notExpired" column="not_expired" jdbcType="OTHER"/>
        <result property="accountNotLocked" column="account_not_locked" jdbcType="OTHER"/>
        <result property="credentialsNotExpired" column="credentials_not_expired" jdbcType="OTHER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="createUser" column="create_user" jdbcType="INTEGER"/>
        <result property="updateUser" column="update_user" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap type="com.cyc.security.entity.vo.UserVO" id="SysUserInfoMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="account" column="account" jdbcType="VARCHAR"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="password" column="password" jdbcType="VARCHAR"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="TIMESTAMP"/>
        <result property="enabled" column="enabled" jdbcType="OTHER"/>
        <result property="notExpired" column="not_expired" jdbcType="OTHER"/>
        <result property="accountNotLocked" column="account_not_locked" jdbcType="OTHER"/>
        <result property="credentialsNotExpired" column="credentials_not_expired" jdbcType="OTHER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="createUser" column="create_user" jdbcType="INTEGER"/>
        <result property="updateUser" column="update_user" jdbcType="INTEGER"/>
        <result property="roleName" column="role_name" jdbcType="VARCHAR"/>
        <result property="roleDescription" column="role_description" jdbcType="VARCHAR"/>
        <collection property="permissionDetails" ofType="com.cyc.security.entity.vo.SysPermissionVO" javaType="java.util.List">
            <result column="permission_code" jdbcType="VARCHAR" property="permissionCode" />
            <result column="permission_name" jdbcType="VARCHAR" property="permissionName" />
            <collection property="urlDetails" ofType="com.cyc.security.entity.SysRequestPath" javaType="java.util.List">
                <result column="url" jdbcType="VARCHAR" property="url" />
                <result column="description" jdbcType="VARCHAR" property="description" />
            </collection>
        </collection>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="SysUserMap">
        select
          id, account, user_name, password, last_login_time, enabled, not_expired, account_not_locked, credentials_not_expired, create_time, update_time, create_user, update_user
        from security.sys_user
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="SysUserMap">
        select
          id, account, user_name, password, last_login_time, enabled, not_expired, account_not_locked, credentials_not_expired, create_time, update_time, create_user, update_user
        from security.sys_user
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="SysUserMap">
        select
        id, account, user_name, password, last_login_time, enabled, not_expired, account_not_locked,
        credentials_not_expired, create_time, update_time, create_user, update_user
        from security.sys_user
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="account != null and account != ''">
                and account = #{account}
            </if>
            <if test="userName != null and userName != ''">
                and user_name = #{userName}
            </if>
            <if test="password != null and password != ''">
                and password = #{password}
            </if>
            <if test="lastLoginTime != null">
                and last_login_time = #{lastLoginTime}
            </if>
            <if test="enabled != null">
                and enabled = #{enabled}
            </if>
            <if test="notExpired != null">
                and not_expired = #{notExpired}
            </if>
            <if test="accountNotLocked != null">
                and account_not_locked = #{accountNotLocked}
            </if>
            <if test="credentialsNotExpired != null">
                and credentials_not_expired = #{credentialsNotExpired}
            </if>
            <if test="createTime != null">
                and create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="createUser != null">
                and create_user = #{createUser}
            </if>
            <if test="updateUser != null">
                and update_user = #{updateUser}
            </if>
        </where>
    </select>

  <!--  &lt;!&ndash;新增所有列&ndash;&gt;
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into security.sys_user(account, user_name, password, last_login_time, enabled, not_expired, account_not_locked, credentials_not_expired, create_time, update_time, create_user, update_user)
        values (#{account}, #{userName}, #{password}, #{lastLoginTime}, #{enabled}, #{notExpired}, #{accountNotLocked}, #{credentialsNotExpired}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser})
    </insert>

    &lt;!&ndash;通过主键修改数据&ndash;&gt;
    <update id="update">
        update security.sys_user
        <set>
            <if test="account != null and account != ''">
                account = #{account},
            </if>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="password != null and password != ''">
                password = #{password},
            </if>
            <if test="lastLoginTime != null">
                last_login_time = #{lastLoginTime},
            </if>
            <if test="enabled != null">
                enabled = #{enabled},
            </if>
            <if test="notExpired != null">
                not_expired = #{notExpired},
            </if>
            <if test="accountNotLocked != null">
                account_not_locked = #{accountNotLocked},
            </if>
            <if test="credentialsNotExpired != null">
                credentials_not_expired = #{credentialsNotExpired},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="createUser != null">
                create_user = #{createUser},
            </if>
            <if test="updateUser != null">
                update_user = #{updateUser},
            </if>
        </set>
        where id = #{id}
    </update>

    &lt;!&ndash;通过主键删除&ndash;&gt;
    <delete id="deleteById">
        delete from security.sys_user where id = #{id}
    </delete>-->
    <select id="getUserInfo" resultMap="SysUserInfoMap">
        select a.*,b.role_name,b.role_description,e.permission_code,e.permission_name,g.url,g.description
        from sys_user as a
        left join
        sys_user_role_relation as c
        on a.id = c.user_id
        left join  sys_role as b
        on c.role_id = b.id
        left join sys_role_permission_relation d
        on c.role_id = d.role_id
        left join  sys_permission as e
        on d.permission_id = e.id
        left join sys_request_path_permission_relation f
        on f.permission_id=e.id
        left join  sys_request_path g
        on g.id = f.url_id
        where a.user_name=#{userName}
    </select>

</mapper>